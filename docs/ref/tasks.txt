=====
Tasks
=====

.. module:: django.tasks
   :synopsis: Django's built-in background task system.

Backends
========

Base backend
------------

.. module:: django.tasks.backends.base

.. class:: BaseTaskBackend

``BaseTaskBackend`` is the parent class for all task backends.

.. method:: BaseTaskBackend.get_result(result_id)

    Retrieve a result by its id. If the result does not exist,
    :exc:`ResultDoesNotExist <django.tasks.exceptions.ResultDoesNotExist>`
    is raised.

    If the backend does not support ``get_result``, :exc:`NotImplementedError`
    is raised.

.. method:: BaseTaskBackend.aget_result(result_id)

    The ``async`` variant of :meth:`BaseTaskBackend.get_result`.

Introspection
~~~~~~~~~~~~~

Introspection allows for identifying the supported functionality of a
backend, and potentially changing behavior accordingly.

.. attribute:: BaseTaskBackend.supports_defer

    Whether the backend supports enqueueing tasks to be
    executed after a specific time using the ``run_after`` attribute.

.. attribute:: BaseTaskBackend.supports_async_task

    Whether the backend supports enqueueing async functions (coroutines).

.. attribute:: BaseTaskBackend.supports_get_result

    Whether the backend supports retrieving task results from another thread
    after they have been enqueued.

Available backends
------------------

Immediate backend
~~~~~~~~~~~~~~~~~

.. module:: django.tasks.backends.immediate

.. class:: ImmediateBackend

The immediate backend executes tasks immediately, rather than in the background.

Dummy backend
~~~~~~~~~~~~~

.. module:: django.tasks.backends.dummy

.. class:: DummyBackend

The dummy backend doesn't execute enqueued tasks at all, instead storing results
for later use.

.. attribute:: DummyBackend.results

    A list of results for the enqueued tasks, in the order they were enqueued.

.. method:: DummyBackend.clear

    Clears the list of stored results.

Task definition
===============

.. module:: django.tasks.task

.. function:: task

A decorator defining a :class:`Task`::

    from django.tasks import task


    @task
    def calculate_meaning_of_life() -> int:
        return 42

In the above example, ``calculate_meaning_of_life`` is a :class:`Task` instance.

``task`` accepts a number of arguments, which are used as-is for the ``Task``:

* :attr:`priority <Task.priority>`
* :attr:`backend <Task.backend>`
* :attr:`queue_name <Task.queue_name>`
* :attr:`enqueue_on_commit <Task.enqueue_on_commit>`

If the task is not valid, according to the backend,
:exc:`django.tasks.exceptions.InvalidTaskError` is raised.

.. class:: Task

An class representing a task to be run in the background. Tasks should be
defined using the :func:`task` decorator.

Attributes of ``Task`` cannot be modified.

.. attribute:: Task.priority

    The priority of the task. Priorities must be between -100 and 100.

    By default, tasks are enqueued with a priority of 0.

.. attribute:: Task.backend

    The alias of the backend the task should be enqueued to.

.. attribute:: Task.queue_name

    The name of the queue the task will be enqueued on to. Defaults to
    ``"default"``.

    This must match a queue defined in :setting:`QUEUES <TASKS-QUEUES>`.

.. attribute:: Task.run_after

    The earliest time the task will be executed, or ``None`` to have no time set.

.. attribute:: Task.enqueue_on_commit

    Whether the task should be enqueued when the transaction commits successfully,
    or immediately.

    By default, the behavior of the backend's
    :setting:`ENQUEUE_ON_COMMIT <TASKS-ENQUEUE_ON_COMMIT>` is used.

.. attribute:: Task.name

    An identifier for a task. Potentially useful for debugging.

    A task's name is not necessarily unique.

.. method:: Task.using()

    Create a new task with modified defaults. The existing task is left unchanged.

    ``using`` allows modifying the following attributes:

    * :attr:`priority <Task.priority>`
    * :attr:`backend <Task.backend>`
    * :attr:`queue_name <Task.queue_name>`
    * :attr:`run_after <Task.run_after>`

    ``run_after`` may also be provided as a :class:`timedelta <datetime.timedelta>`, which
    is used relative to the current time (when ``using`` is called).

.. method:: Task.enqueue(*args, **kwargs)

    Enqueue the task for later execution.

    Arguments and keyword arguments are passed to the task's function as-is.

    If the task is not valid, according to the backend,
    :exc:`django.tasks.exceptions.InvalidTaskError` is raised.

.. method:: Task.aenqueue(*args, **kwargs)

    The ``async`` variant of :meth:`enqueue <Task.enqueue>`.

.. method:: Task.get_result(result_id)

    Retrieve a result by its id. If the result does not exist, or is not the same
    type as the current task,
    :exc:`ResultDoesNotExist <django.tasks.exceptions.ResultDoesNotExist>`
    is raised.

    If the backend does not support ``get_result``, :exc:`NotImplementedError`
    is raised.

.. method:: Task.aget_result(*args, **kwargs)

    The ``async`` variant of :meth:`get_result <Task.get_result>`.

Task results
============

.. class:: ResultStatus

    An Enum representing the status of a :class:`TaskResult`.

.. attribute:: ResultStatus.NEW

    The :class:`Task` has not been run.

.. attribute:: ResultStatus.RUNNING

    The :class:`Task` is currently being executed.

.. attribute:: ResultStatus.FAILED

    The :class:`Task` raised an exception during execution, or was unable
    to start.

.. attribute:: ResultStatus.COMPLETE

    The :class:`Task` has finished executing successfully.

.. class:: TaskResult

The ``TaskResult`` stores the information about a specific execution of a
:class:`Task`.

Attributes of ``TaskResult`` cannot be modified.

.. attribute:: TaskResult.task

    The :class:`Task` the result was enqueued for.

.. attribute:: TaskResult.id

    A unique identifier for the result, which can be passed to
    :meth:`Task.get_result`.

    The id must be a UUID4, represented as a dashed string.

.. attribute:: TaskResult.status

    The :class:`status <ResultStatus>` of the result.

.. attribute:: TaskResult.enqueued_at

    The time when the task was enqueued.

    If :attr:`Task.enqueue_on_commit` was set, this is the time the transaction
    completed.

.. attribute:: TaskResult.started_at

    The time when the task began execution.

.. attribute:: TaskResult.finished_at

    The time when the task finished execution, whether it failed or completed.

.. attribute:: TaskResult.backend

    The backend the result is from.

.. attribute:: TaskResult.exception

    The exception raised when executing the task, or ``None`` if no exception
    was raised.

.. attribute:: TaskResult.traceback

    The exception traceback from the raised exception when the task failed.

.. attribute:: TaskResult.return_value

    The return value from the task function.

    If the task has not finished yet, or failed, :exc:`ValueError` is raised.

.. method:: TaskResult.refresh

    Refresh the result's attributes from the queue store.

.. method:: TaskResult.arefresh

    The ``async`` variant of :meth:`TaskResult.refresh`.


Exceptions
==========

.. module:: django.tasks.exceptions

.. exception:: ResultDoesNotExist

    Raised by :meth:`get_result <django.tasks.backends.base.BaseTaskBackend.get_result>`
    when the provided ``result_id`` does not exist.

.. exception:: InvalidTaskError

    Raised when the :class:`Task <django.tasks.task.Task>` attempting to be
    enqueued is invalid.
